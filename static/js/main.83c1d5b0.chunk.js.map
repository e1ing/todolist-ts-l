{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","TextField","size","variant","helperText","value","onChange","e","currentTarget","onKeyPress","key","label","onBlur","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","Input","autoFocus","changeTitle","onDoubleClick","TodoList","tasksJSXElements","tasks","map","t","id","className","isDone","Checkbox","changeTaskStatus","checked","todoListID","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","style","listStyle","paddingLeft","Button","filter","changeFilter","marginLeft","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","newTask","taskId","newIsDoneValue","newTitle","tl","getTasksForTodolist","todoList","todoListsComponents","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","newTodoListId","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+UAyDeA,MAjDf,SAAqBC,GAA8B,IAAD,EACpBC,mBAAiB,IADG,mBACvCC,EADuC,KAChCC,EADgC,OAEpBF,oBAAkB,GAFE,mBAEvCG,EAFuC,KAEhCC,EAFgC,KASxCC,EAAiB,WACnB,IAAMC,EAAeL,EAAMM,OACvBD,EACAP,EAAMS,QAAQF,GAEdF,GAAS,GAEbF,EAAS,KAWb,OACI,6BACI,kBAACO,EAAA,EAAD,CACIC,KAAM,QACNC,QAAS,WACTR,MAAOA,EACPS,WAAYT,GAAS,oBACrBU,MAAOZ,EACPa,SA/BU,SAACC,GACnBb,EAASa,EAAEC,cAAcH,OACzBT,GAAS,IA8BDa,WAjBc,SAACF,GACT,UAAVA,EAAEG,KACFb,KAgBIc,MAAO,QACPC,OAAQ,kBAAIhB,GAAS,MAEzB,kBAACiB,EAAA,EAAD,CAAYC,MAAO,UACPC,QAASlB,GACjB,kBAACmB,EAAA,EAAD,S,SC1CT,SAASC,EAAa1B,GAA+B,IAAD,EAC7BC,mBAAiBD,EAAME,OADM,mBAChDA,EADgD,KACzCC,EADyC,OAEvBF,oBAAkB,GAFK,mBAEhD0B,EAFgD,KAEtCC,EAFsC,KAgBvD,OACID,EACM,kBAACE,EAAA,EAAD,CACEN,MAAO,UAEPT,MAAOZ,EACE4B,WAAS,EACTf,SAVC,SAACC,GACnBb,EAASa,EAAEC,cAAcH,QAURO,OAfD,WAChBO,GAAY,GACZ5B,EAAM+B,YAAY7B,MAcZ,0BAAM8B,cApBG,WACfJ,GAAY,KAmB4B5B,EAAME,O,+BCmEvC+B,MA/Ef,SAAkBjC,GAQd,IAAMkC,EAAmBlC,EAAMmC,MAAMC,KAAI,SAAAC,GAOrC,OACI,wBAAIlB,IAAKkB,EAAEC,GAAIC,UAAWF,EAAEG,OAAS,UAAY,IAE7C,kBAACC,EAAA,EAAD,CACIlB,MAAO,UACPR,SARa,SAACC,GAAD,OAAsChB,EAAM0C,iBAAiBL,EAAEC,GAAItB,EAAEC,cAAc0B,QAAS3C,EAAM4C,aAS/GD,QAASN,EAAEG,SAEX,kBAACd,EAAD,CAAcxB,MAAOmC,EAAEnC,MAAO6B,YAVlB,SAAC7B,GAAD,OAAmBF,EAAM6C,gBAAgBR,EAAEC,GAAIpC,EAAOF,EAAM4C,eAY5E,kBAACtB,EAAA,EAAD,CAAYE,QAhBD,WACfxB,EAAM8C,WAAWT,EAAEC,GAAItC,EAAM4C,cAgBrB,kBAACG,EAAA,EAAD,WAehB,OACI,6BACI,4BACI,kBAACrB,EAAD,CAAcxB,MAAOF,EAAME,MAAO6B,YANlB,SAAC7B,GAAD,OAAmBF,EAAMgD,oBAAoB9C,EAAOF,EAAM4C,eAO1E,kBAACtB,EAAA,EAAD,CAAYE,QATM,kBAAMxB,EAAMiD,eAAejD,EAAM4C,cAU/C,kBAACG,EAAA,EAAD,QAKR,kBAAC,EAAD,CAAatC,QAdL,SAACP,GAAD,OAAmBF,EAAMkD,QAAQhD,EAAOF,EAAM4C,eAgBtD,wBAAIO,MAAO,CAACC,UAAW,OAAQC,YAAa,QACvCnB,GAEL,6BACI,kBAACoB,EAAA,EAAD,CAAQ/B,MAAO,UACPZ,KAAM,QACNC,QAA0B,QAAjBZ,EAAMuD,OAAmB,YAAc,WAChD/B,QA3BK,kBAAMxB,EAAMwD,aAAa,MAAOxD,EAAM4C,cAwBnD,OAKA,kBAACU,EAAA,EAAD,CAAQH,MAAO,CAACM,WAAY,OACpBlC,MAAO,UACPZ,KAAM,QACNC,QAA0B,WAAjBZ,EAAMuD,OAAsB,YAAc,WACnD/B,QAhCQ,kBAAMxB,EAAMwD,aAAa,SAAUxD,EAAM4C,cA4BzD,UAMA,kBAACU,EAAA,EAAD,CAAQH,MAAO,CAACM,WAAY,OACpBlC,MAAO,UACPZ,KAAM,QACNC,QAA0B,cAAjBZ,EAAMuD,OAAyB,YAAc,WACtD/B,QArCW,kBAAMxB,EAAMwD,aAAa,YAAaxD,EAAM4C,cAiC/D,gB,uEC+EDc,MA9If,WAAgB,IAAD,EAELC,EAAeC,cACfC,EAAeD,cAHV,EAKuB3D,mBAA8B,CAC5D,CAACqC,GAAIqB,EAAczD,MAAO,gBAAiBqD,OAAQ,OACnD,CAACjB,GAAIuB,EAAc3D,MAAO,cAAeqD,OAAQ,SAP1C,mBAKJO,EALI,KAKOC,EALP,OAWe9D,oBAAQ,mBACzB0D,EAAe,CACZ,CAACrB,GAAIsB,cAAM1D,MAAO,OAAQsC,QAAQ,GAClC,CAACF,GAAIsB,cAAM1D,MAAO,MAAOsC,QAAQ,GACjC,CAACF,GAAIsB,cAAM1D,MAAO,QAASsC,QAAQ,KAJb,cAMzBqB,EAAe,CACZ,CAACvB,GAAIsB,cAAM1D,MAAO,OAAQsC,QAAQ,GAClC,CAACF,GAAIsB,cAAM1D,MAAO,OAAQsC,QAAQ,GAClC,CAACF,GAAIsB,cAAM1D,MAAO,QAASsC,QAAQ,KATb,IAXvB,mBAWJL,EAXI,KAWG6B,EAXH,OA4BiB/D,mBAAyC,OA5B1D,mBA+BX,SAAS6C,EAAWmB,EAAgBrB,GAChCT,EAAMS,GAAcT,EAAMS,GAAYW,QAAO,SAAAlB,GAAC,OAAIA,EAAEC,KAAO2B,KAC3DD,EAAS,eAAI7B,IAGjB,SAASe,EAAQhD,EAAe0C,GAC5B,IAAMsB,EAAoB,CACtB5B,GAAIsB,cACJ1D,MAAOA,EACPsC,QAAQ,GAEZwB,EAAS,2BAAI7B,GAAL,kBAAaS,EAAb,CAA2BsB,GAA3B,mBAAuC/B,EAAMS,QAGzD,SAASF,EAAiByB,EAAgBC,EAAyBxB,GAC/DT,EAAMS,GAAcT,EAAMS,GAAYR,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAO6B,EAAT,2BAAsB9B,GAAtB,IAAyBG,OAAQ4B,IAAkB/B,KAClG2B,EAAS,eAAI7B,IAGjB,SAASU,EAAgBsB,EAAgBE,EAAkBzB,GACvDT,EAAMS,GAAcT,EAAMS,GAAYR,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAO6B,EAAT,2BAAsB9B,GAAtB,IAAyBnC,MAAOmE,IAAYhC,KAC3F2B,EAAS,eAAI7B,IAGjB,SAASqB,EAAa1C,EAAyB8B,GAC3CmB,EAAaD,EAAU1B,KAAI,SAAAkC,GAAE,OAAIA,EAAGhC,KAAOM,EAAV,2BAA2B0B,GAA3B,IAA+Bf,OAAQzC,IAASwD,MAGrF,SAASrB,EAAeL,GACpBmB,EAAaD,EAAUP,QAAO,SAAAe,GAAE,OAAIA,EAAGhC,KAAOM,aACvCT,EAAMS,GAGjB,SAASI,EAAoB9C,EAAe0C,GACxCmB,EAAaD,EAAU1B,KAAI,SAAAkC,GAAE,OAAIA,EAAGhC,KAAOM,EAAV,2BAA2B0B,GAA3B,IAA+BpE,MAAOA,IAASoE,MAepF,SAASC,EAAoBC,GACzB,OAAQA,EAASjB,QACb,IAAK,SACD,OAAOpB,EAAMqC,EAASlC,IAAIiB,QAAO,SAAAlB,GAAC,OAAKA,EAAEG,UAC7C,IAAK,YACD,OAAOL,EAAMqC,EAASlC,IAAIiB,QAAO,SAAAlB,GAAC,OAAIA,EAAEG,UAC5C,QACI,OAAOL,EAAMqC,EAASlC,KAvFvB,UA2FX,IAAMmC,EAAsBX,EAAU1B,KAAI,SAAAkC,GACtC,OACI,kBAACI,EAAA,EAAD,CAAMC,MAAI,EAACxD,IAAKmD,EAAGhC,IACnB,kBAACsC,EAAA,EAAD,CAAOC,UAAW,EAAG1B,MAAO,CAAC2B,QAAS,SAClC,kBAAC,EAAD,CACIlC,WAAY0B,EAAGhC,GACfpC,MAAOoE,EAAGpE,MACViC,MAAOoC,EAAoBD,GAC3Bf,OAAQe,EAAGf,OACXT,WAAYA,EACZU,aAAcA,EACdN,QAASA,EACTR,iBAAkBA,EAClBO,eAAgBA,EAChBJ,gBAAiBA,EACjBG,oBAAqBA,SAOrC,OAEI,6BACI,kBAAC+B,EAAA,EAAD,CAAQC,SAAU,UACd,kBAACC,EAAA,EAAD,CAAS9B,MAAO,CAAC+B,eAAe,kBAC5B,kBAAC5D,EAAA,EAAD,CAAYC,MAAO,WACf,kBAAC4D,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYxE,QAAS,MAArB,aAGA,kBAAC0C,EAAA,EAAD,CACI1C,QAAS,WACTW,MAAO,WAFX,WAKR,kBAAC8D,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACZ,EAAA,EAAD,CAAMa,WAAS,EAACpC,MAAO,CAAC2B,QAAS,aAC7B,kBAAC,EAAD,CAAarE,QA/D7B,SAAqBP,GACjB,IAAMsF,EAAgB5B,cAChB6B,EAA4B,CAC9BnD,GAAIkD,EAAetF,QAAOqD,OAAQ,OAEtCQ,EAAa,GAAD,mBAAKD,GAAL,CAAgB2B,KAC5BzB,EAAS,2BAAI7B,GAAL,kBAAaqD,EAAgB,UA2D7B,kBAACd,EAAA,EAAD,CAAMa,WAAS,EAACG,QAAS,GACxBjB,MCpJGkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtG,GACLuG,QAAQvG,MAAMA,EAAMwG,c","file":"static/js/main.83c1d5b0.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox, Delete} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false) //убираем ошибку если начинаем печатать в поле\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim() //обрезка пробелов впереди и сзади\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true) //подсвечивает красным, если в строке пусто\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n\r\n    /*const errorMessage = error ? <div className={\"error-message\"}>Title is required</div> : null*/\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                error={error}\r\n                helperText={error && \"Title is required\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                label={\"Title\"}\r\n                onBlur={()=>setError(false)}\r\n            />\r\n            <IconButton color={\"primary\"}\r\n                        onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddItemForm;","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {Input, TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        //setTitle(props.title) //костыль\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={\"primary\"}\r\n                /*variant={\"standard\"}*/\r\n                value={title}\r\n                         autoFocus\r\n                         onChange={onChangeTitle}\r\n                         onBlur={offEditMode}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {CheckBox, Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void //функция, которая перезаписывает массив и ничего не возвращает\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    // const {filter, tasks, title: tlTitte, addTask, removeTask, changeFilter} = props\r\n    //все переменные-свойства в функции определяем как пропсы - деструктуризаация пропсов\r\n    //также можно сразу вместо пропсов все свойства прописать тут (props: TodoListPropsType)\r\n\r\n    /*  const [title, setTitle] = useState<string>(\"\")\r\n      const [error, setError] = useState<boolean>(false)*/\r\n\r\n    const tasksJSXElements = props.tasks.map(t => {\r\n        const removeTask = () => {\r\n            props.removeTask(t.id, props.todoListID)\r\n        }\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.todoListID)\r\n\r\n        return (\r\n            <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    onChange={changeTaskStatus}\r\n                    checked={t.isDone}/>\r\n\r\n                    <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n\r\n                <IconButton onClick={removeTask}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </li>\r\n        )\r\n    })\r\n\r\n\r\n    const onClickAllFilter = () => props.changeFilter(\"all\", props.todoListID)\r\n    const onClickActiveFilter = () => props.changeFilter(\"active\", props.todoListID)\r\n    const onClickCompletedFilter = () => props.changeFilter(\"completed\", props.todoListID)\r\n    const onClickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={onClickRemoveTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n\r\n\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0px\"}}>\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <Button color={\"primary\"}\r\n                        size={\"small\"}\r\n                        variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        onClick={onClickAllFilter}>All\r\n                </Button>\r\n                <Button style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        size={\"small\"}\r\n                        variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        onClick={onClickActiveFilter}>Active\r\n                </Button>\r\n                <Button style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        size={\"small\"}\r\n                        variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        onClick={onClickCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n//BLL:\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID_2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n            [todoListID_1]: [\r\n                {id: v1(), title: \"HTML\", isDone: false},\r\n                {id: v1(), title: \"CSS\", isDone: false},\r\n                {id: v1(), title: \"React\", isDone: true}\r\n            ],\r\n            [todoListID_2]: [\r\n                {id: v1(), title: \"Milk\", isDone: true},\r\n                {id: v1(), title: \"Meat\", isDone: true},\r\n                {id: v1(), title: \"Bread\", isDone: false}\r\n            ],\r\n        }\r\n    )\r\n\r\n//local state - локальное хранилище, state устанавливает и ренедит\r\n\r\n\r\n    const [filter, setFilter] = useState<\"all\" | \"active\" | \"completed\">(\"all\")\r\n\r\n//Remove tasks\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID);\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        };\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]});\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskId ? {...t, isDone: newIsDoneValue} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskId ? {...t, title: newTitle} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: value} : tl));\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl));\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListId = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListId, title, filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n\r\n\r\n//UI:\r\n//функция\r\n    function getTasksForTodolist(todoList: TodoListType) {\r\n        switch (todoList.filter) {\r\n            case \"active\":\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoList.id];\r\n        }\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n            <Paper elevation={5} style={{padding: \"20px\"}}>\r\n                <TodoList\r\n                    todoListID={tl.id}\r\n                    title={tl.title}\r\n                    tasks={getTasksForTodolist(tl)}\r\n                    filter={tl.filter}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n\r\n        <div>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent:\"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}